//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;
using Rock.Attribute;
using Rock.Model;
using Rock.Web.Cache;

namespace Rock.ViewModel
{
    /// <summary>
    /// DataView View Model
    /// </summary>
    [ViewModelOf( typeof( Rock.Model.DataView ) )]
    public partial class DataViewViewModel : ViewModelBase
    {
        /// <summary>
        /// Gets or sets the CategoryId.
        /// </summary>
        /// <value>
        /// The CategoryId.
        /// </value>
        public int? CategoryId { get; set; }

        /// <summary>
        /// Gets or sets the DataViewFilterId.
        /// </summary>
        /// <value>
        /// The DataViewFilterId.
        /// </value>
        public int? DataViewFilterId { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        /// <value>
        /// The Description.
        /// </value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the EntityTypeId.
        /// </summary>
        /// <value>
        /// The EntityTypeId.
        /// </value>
        public int? EntityTypeId { get; set; }

        /// <summary>
        /// Gets or sets the IncludeDeceased.
        /// </summary>
        /// <value>
        /// The IncludeDeceased.
        /// </value>
        public bool IncludeDeceased { get; set; }

        /// <summary>
        /// Gets or sets the IsSystem.
        /// </summary>
        /// <value>
        /// The IsSystem.
        /// </value>
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or sets the LastRunDateTime.
        /// </summary>
        /// <value>
        /// The LastRunDateTime.
        /// </value>
        public DateTime? LastRunDateTime { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        /// <value>
        /// The Name.
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the PersistedLastRefreshDateTime.
        /// </summary>
        /// <value>
        /// The PersistedLastRefreshDateTime.
        /// </value>
        public DateTime? PersistedLastRefreshDateTime { get; set; }

        /// <summary>
        /// Gets or sets the PersistedLastRunDurationMilliseconds.
        /// </summary>
        /// <value>
        /// The PersistedLastRunDurationMilliseconds.
        /// </value>
        public int? PersistedLastRunDurationMilliseconds { get; set; }

        /// <summary>
        /// Gets or sets the PersistedScheduleIntervalMinutes.
        /// </summary>
        /// <value>
        /// The PersistedScheduleIntervalMinutes.
        /// </value>
        public int? PersistedScheduleIntervalMinutes { get; set; }

        /// <summary>
        /// Gets or sets the RunCount.
        /// </summary>
        /// <value>
        /// The RunCount.
        /// </value>
        public int? RunCount { get; set; }

        /// <summary>
        /// Gets or sets the RunCountLastRefreshDateTime.
        /// </summary>
        /// <value>
        /// The RunCountLastRefreshDateTime.
        /// </value>
        public DateTime? RunCountLastRefreshDateTime { get; set; }

        /// <summary>
        /// Gets or sets the TimeToRunDurationMilliseconds.
        /// </summary>
        /// <value>
        /// The TimeToRunDurationMilliseconds.
        /// </value>
        public double? TimeToRunDurationMilliseconds { get; set; }

        /// <summary>
        /// Gets or sets the TransformEntityTypeId.
        /// </summary>
        /// <value>
        /// The TransformEntityTypeId.
        /// </value>
        public int? TransformEntityTypeId { get; set; }

        /// <summary>
        /// Gets or sets the CreatedDateTime.
        /// </summary>
        /// <value>
        /// The CreatedDateTime.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the ModifiedDateTime.
        /// </summary>
        /// <value>
        /// The ModifiedDateTime.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByPersonAliasId.
        /// </summary>
        /// <value>
        /// The CreatedByPersonAliasId.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the ModifiedByPersonAliasId.
        /// </summary>
        /// <value>
        /// The ModifiedByPersonAliasId.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

        /// <summary>
        /// Sets the properties from.
        /// </summary>
        /// <param name="model">The model.</param>
        /// <param name="currentPerson">The current person.</param>
        /// <param name="loadAttributes">if set to <c>true</c> [load attributes].</param>
        public virtual void SetPropertiesFrom( Rock.Model.DataView model, Person currentPerson = null, bool loadAttributes = true )
        {
            if ( model == null )
            {
                return;
            }

            if ( loadAttributes && model is IHasAttributes hasAttributes )
            {
                if ( hasAttributes.Attributes == null )
                {
                    hasAttributes.LoadAttributes();
                }

                Attributes = hasAttributes.AttributeValues.Where( av =>
                {
                    var attribute = AttributeCache.Get( av.Value.AttributeId );
                    return attribute?.IsAuthorized( Rock.Security.Authorization.EDIT, currentPerson ) ?? false;
                } ).ToDictionary(
                    kvp => kvp.Key,
                    kvp => kvp.Value.ToViewModel<AttributeValueViewModel>() as object );
            }

            CategoryId = model.CategoryId;
            DataViewFilterId = model.DataViewFilterId;
            Description = model.Description;
            EntityTypeId = model.EntityTypeId;
            IncludeDeceased = model.IncludeDeceased;
            IsSystem = model.IsSystem;
            LastRunDateTime = model.LastRunDateTime;
            Name = model.Name;
            PersistedLastRefreshDateTime = model.PersistedLastRefreshDateTime;
            PersistedLastRunDurationMilliseconds = model.PersistedLastRunDurationMilliseconds;
            PersistedScheduleIntervalMinutes = model.PersistedScheduleIntervalMinutes;
            RunCount = model.RunCount;
            RunCountLastRefreshDateTime = model.RunCountLastRefreshDateTime;
            TimeToRunDurationMilliseconds = model.TimeToRunDurationMilliseconds;
            TransformEntityTypeId = model.TransformEntityTypeId;
            CreatedDateTime = model.CreatedDateTime;
            ModifiedDateTime = model.ModifiedDateTime;
            CreatedByPersonAliasId = model.CreatedByPersonAliasId;
            ModifiedByPersonAliasId = model.ModifiedByPersonAliasId;

            SetAdditionalPropertiesFrom( model, currentPerson, loadAttributes );
        }

        /// <summary>
        /// Creates a view model from the specified model.
        /// </summary>
        /// <param name="model">The model.</param>
        /// <param name="currentPerson" >The current person.</param>
        /// <param name="loadAttributes" >if set to <c>true</c> [load attributes].</param>
        /// <returns></returns>
        public static DataViewViewModel From( Rock.Model.DataView model, Person currentPerson = null, bool loadAttributes = true )
        {
            var viewModel = new DataViewViewModel();
            viewModel.SetPropertiesFrom( model, currentPerson, loadAttributes );
            return viewModel;
        }
    }
}
